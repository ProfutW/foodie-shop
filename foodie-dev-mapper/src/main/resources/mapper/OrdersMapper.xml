<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.java.learn.mapper.OrdersMapper" >
  <resultMap id="BaseResultMap" type="com.java.learn.pojo.Orders" >
    <!--
      WARNING - @mbg.generated
    -->
    <id column="id" property="id" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="VARCHAR" />
    <result column="receiver_name" property="receiverName" jdbcType="VARCHAR" />
    <result column="receiver_mobile" property="receiverMobile" jdbcType="VARCHAR" />
    <result column="receiver_address" property="receiverAddress" jdbcType="VARCHAR" />
    <result column="total_amount" property="totalAmount" jdbcType="INTEGER" />
    <result column="real_pay_amount" property="realPayAmount" jdbcType="INTEGER" />
    <result column="post_amount" property="postAmount" jdbcType="INTEGER" />
    <result column="pay_method" property="payMethod" jdbcType="INTEGER" />
    <result column="left_msg" property="leftMsg" jdbcType="VARCHAR" />
    <result column="extand" property="extand" jdbcType="VARCHAR" />
    <result column="is_comment" property="isComment" jdbcType="INTEGER" />
    <result column="is_delete" property="isDelete" jdbcType="INTEGER" />
    <result column="created_time" property="createdTime" jdbcType="TIMESTAMP" />
    <result column="updated_time" property="updatedTime" jdbcType="TIMESTAMP" />
  </resultMap>



<!--  分组嵌套查询的情况下，使用分页插件，必须将子查询独立出来，否则分页个数会按照子查询的数目来-->
  <resultMap id="OrderListVO" type="com.java.learn.pojo.vo.OrderListVO" >
    <id column="orderId" property="orderId" />
    <result column="createdTime" property="createdTime" />
    <result column="payMethod" property="payMethod" />
    <result column="realPayAmount" property="realPayAmount" />
    <result column="postAmount" property="postAmount" />
    <result column="isComment" property="isComment" />
    <result column="orderStatus" property="orderStatus" />

    <collection property="subOrderItemList"
                ofType="com.java.learn.pojo.vo.MySubOrderItemVO"
                select="getSubItems"
                column="orderId">
      <result column="itemId" property="itemId" />
      <result column="itemName" property="itemName" />
      <result column="itemImg" property="itemImg" />
      <result column="itemSpecId" property="itemSpecId" />
      <result column="itemSpecName" property="itemSpecName" />
      <result column="buyCounts" property="buyCounts" />
      <result column="price" property="price" />
    </collection>
  </resultMap>

  <select id="queryOrdersByUserId" parameterType="map" resultMap="OrderListVO">
    SELECT
      od.id as orderId,
      od.created_time as createdTime,
      od.pay_method as payMethod,
      od.real_pay_amount as realPayAmount,
      od.post_amount as postAmount,
      od.is_comment as isComment,
      os.order_status as orderStatus
    FROM
      orders as od
        LEFT JOIN
      order_status as os
      ON
        od.id = os.order_id
    WHERE
      od.user_id = #{paramsMap.userId}
      <if test="paramsMap.orderStatus != null">
        AND os.order_status = #{paramsMap.orderStatus}
      </if>
      AND
      od.is_delete = 0
    ORDER BY
      od.updated_time DESC
  </select>

  <select id="getSubItems" parameterType="string" resultType="com.java.learn.pojo.vo.MySubOrderItemVO">
    SELECT
    oi.item_id as itemId,
    oi.item_name as itemName,
    oi.item_img as itemImg,
    oi.item_spec_id as itemSpecId,
    oi.item_spec_name as itemSpecName,
    oi.buy_counts as buyCounts,
    oi.price as price
    FROM
    order_items as oi
    WHERE
    oi.order_id = #{orderId}
  </select>

  <select id="queryOrdersByUserIdDoNotUse" parameterType="map" resultMap="OrderListVO">
    SELECT
      od.id as orderId,
      od.created_time as createdTime,
      od.pay_method as payMethod,
      od.real_pay_amount as realPayAmount,
      od.post_amount as postAmount,
      od.is_comment as isComment,
      os.order_status as orderStatus,
      oi.item_id as itemId,
      oi.item_name as itemName,
      oi.item_img as itemImg,
      oi.item_spec_id as itemSpecId,
      oi.item_spec_name as itemSpecName,
      oi.buy_counts as buyCounts,
      oi.price as price
    FROM
      orders as od
        LEFT JOIN
      order_items as oi
      ON
        od.id = oi.order_id
        LEFT JOIN
      order_status as os
      ON
        od.id = os.order_id
    WHERE
      od.user_id = #{paramsMap.userId}
      <if test="paramsMap.orderStatus != null">
        AND os.order_status = #{paramsMap.orderStatus}
      </if>
      AND
      od.is_delete = 0
    ORDER BY
      od.updated_time DESC
  </select>



  <select id="getMyOrderStatusCounts" parameterType="Map" resultType="int">
    SELECT
    count(1)
    FROM
    orders o
    LEFT JOIN
    order_status os
    on
    o.id = os.order_id
    WHERE
    o.user_id = #{paramsMap.userId}
    AND
    os.order_status = #{paramsMap.orderStatus}
    <if test="paramsMap.isComment != null">
      and o.is_comment = #{paramsMap.isComment}
    </if>
  </select>


  <select id="getMyOrderTrend" parameterType="Map" resultType="com.java.learn.pojo.OrderStatus">

    SELECT
      os.order_id as orderId,
      os.order_status as orderStatus,
      os.created_time as createdTime,
      os.pay_time as payTime,
      os.deliver_time as deliverTime,
      os.success_time as successTime,
      os.close_time as closeTime,
      os.comment_time as commentTime
    FROM
      orders o
        LEFT JOIN
      order_status os
      on
        o.id = os.order_id
    WHERE
      o.is_delete = 0
      AND
      o.user_id = #{paramsMap.userId}
      AND
      os.order_status in (20, 30, 40)
    ORDER BY
      os.order_id
      DESC
  </select>
</mapper>